Review


During Assignment 8 we were successfully able to implement our model and controller with our provider’s view and varying model interfaces. The actual implementation of the provider’s code with our code started out a bit hectic. When we started we were confused about which way to go as it seemed the possibilities for implementation were endless. We knew we had to write adapter classes for the incompatible parts of both of our code sets. We wrote adapters for the main data structures such as the cells and spreadsheet. Luckily both of our spreadsheets were represented by maps, the only difference being that we used a map of Coords to Cells where they used a map that mapped Coords to their version of Cell. So, we were able to implement a `mapConverter` which took in our map and returned their version of a map with the help of an Iterator. We then created an adapter which took in their view and turned it in our version of view; `IView`. 

With the view, cell and spreadsheet adapters in place we were able to successfully render the provider’s view and the only thing left to do was implementing a controller. The controller was easy to do once we had an understanding of their controller interface and we realized all we had to do was use our static `update` function and connect them to the corresponding buttons. 

The experience with our providers was very little. It was certainly a business-like transaction, with minimal communication. Our providers were Brianna and Jonathan and we only interacted with Brianna. Brianna originally sent us the view interfaces with their implementation missing, as well as their controller interfaces. We eventually got them but we were a bit lost during the short time we did not have them. Other than that, we had solid interactions with Brianna and she was more than willing to answer any questions we had about their implementation and functionality. 

Overall, this experience was great. Being able to successfully integrate someone else’s code into ours was helpful in understanding our code and seeing what we could have done better. Brianna and Jonathan used techniques that neither Satwik or I thought of and they worked great, and it shows as they had a beautifully implemented view. One of the biggest things they did was use JTable. The use of JTable was easy and looked great. Ours was a homemade spreadsheet and had its bugs that, although we eventually fixed, we never would have encountered had we used JTable. We found that our model was a bit too coupled with our view and this was clear to use when we tried to implement our controller with their view and found a lot of data was missing in their view. In reality, it was not that their view was missing data it was that our view was releasing too much data to our controller. 

We also found that in their code they implemented runnable in their controller which we had no prior experience with, so luckily, we were able to find a simpler way to handle the communication between the view and model, by reusing similar code we used in our version. One of the largest things we dealt with was that we found their view was not very cohesive as a lot of functionality that probably should have been in the model was placed in the view, this made a few things, such as adding separate button functionality a bit difficult. Lastly, the read only aspect of their spreadsheet was great and made us wish we had done the same. Essentially, they made a mutable spreadsheet and from that made a read-only version of it which they allowed their view to project, which was done gracefully by our providers. 
